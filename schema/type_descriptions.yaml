# This file contains an array of objects defining the descriptions of properties for types defined in the schema.
# See "description generation" in CONTRIBUTING.md for more details.
#
# Example rule:
# - type: MyType                              # The type name corresponding to the JSON Schema Title.
#   property_descriptions:                    # Mapping of the type's properties and their descriptions.
#     propertyA: The propertyA description.   # The description for MyType.propertyA.
#     propertyB: The propertyB description.   # The description for MyType.propertyB
#   path_patterns:                            # Array of patterns where this type occurs in the schema. Each key-value in an example configuration file is transformed
#     - .foo                                  # into its JSON dot-notation location in the file, which is matched against these patterns. Each pattern is turned in a regex,
                                              # after escaping special characters and replacing "*" with ".*".

# START OpenTelemetryConfiguration
- type: OpenTelemetryConfiguration
  property_descriptions:
    file_format: >
      The file format version.

      The yaml format is documented at

      https://github.com/open-telemetry/opentelemetry-configuration/tree/main/schema
    disabled: >
      Configure if the SDK is disabled or not.
      
      If omitted or null, false is used.
    resource: >
      Configure resource for all signals.
      
      If omitted, the default resource is used.
    propagator: >
      Configure text map context propagators.
      
      If omitted, tracecontext and baggage are used.
    attribute_limits: Configure general attribute limits. See also tracer_provider.limits, logger_provider.limits.
    logger_provider: >
      Configure logger provider.
      
      If omitted, a noop logger provider is used.
    tracer_provider: >
      Configure tracer provider.
      
      If omitted, a noop tracer provider is used.
    meter_provider: >
      Configure meter provider.
      
      If omitted, a noop meter provider is used.
    instrumentation: Configure instrumentation.
  path_patterns:
    - .

- type: Resource
  property_descriptions:
    attributes: >
      Configure resource attributes. Entries have higher priority than entries from .resource.attributes_list.
      
      Entries must contain .name and .value, and may optionally include .type. If an entry's .type omitted or null, string is used.
      
      The .value's type must match the .type. Values for .type include: string, bool, int, double, string_array, bool_array, int_array, double_array.
    attributes_list: >
      Configure resource attributes. Entries have lower priority than entries from .resource.attributes.
      
      The value is a list of comma separated key-value pairs matching the format of OTEL_RESOURCE_ATTRIBUTES. See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/configuration/sdk-environment-variables.md#general-sdk-configuration for details.
      
      If omitted or null, no resource attributes are added.
    detectors: Configure resource detectors.
    schema_url: >
      Configure resource schema URL.
      
      If omitted or null, no schema URL is used.
  path_patterns:
    - .resource

- type: Detectors
  property_descriptions:
    attributes: Configure attributes provided by resource detectors.
  path_patterns:
    - .resource.detectors

- type: DetectorAttributes
  property_descriptions:
    included: >
      Configure list of attribute key patterns to include from resource detectors.
      
      Attribute keys from resource detectors are evaluated to match as follows:
       * If the value of the attribute key exactly matches.
       * If the value of the attribute key matches the wildcard pattern, where '?' matches any single character and '*' matches any number of characters including none.
      If omitted, all attributes are included.
    excluded: >
      Configure list of attribute key patterns to exclude from resource detectors. Applies after .resource.detectors.attributes.included (i.e. excluded has higher priority than included).
      
      Attribute keys from resource detectors are evaluated to match as follows:
       * If the value of the attribute key exactly matches.
       * If the value of the attribute key matches the wildcard pattern, where '?' matches any single character and '*' matches any number of characters including none.
      If omitted, .included attributes are included.
  path_patterns:
    - .resource.detectors.attributes

- type: AttributeLimits
  property_descriptions:
    attribute_value_length_limit: >
      Configure max attribute value size. 
      
      Value must be non-negative.
      
      If omitted or null, there is no limit.
    attribute_count_limit: >
      Configure max attribute count. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
  path_patterns:
    - .attribute_limits

- type: Propagator
  property_descriptions:
    composite: >
      Configure the set of propagators to include in the composite text map propagator. 
      
      Built-in values include: tracecontext, baggage, b3, b3multi, jaeger, none. Known third party values include: xray, ottrace. For behavior of values see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/configuration/sdk-environment-variables.md#general-sdk-configuration.
  path_patterns:
    - .propagator
# END OpenTelemetryConfiguration

# START LoggerProvider
- type: LoggerProvider
  property_descriptions:
    processors: Configure log record processors.
    limits: Configure log record limits. See also attribute_limits.
  path_patterns:
    - .logger_provider

- type: LogRecordProcessor
  property_descriptions:
    batch: Configure a batch log record processor.
    simple: Configure a simple log record processor.
  path_patterns:
    - .logger_provider.processors[]

- type: BatchLogRecordProcessor
  property_descriptions:
    schedule_delay: >
      Configure delay interval (in milliseconds) between two consecutive exports. 
      
      Value must be non-negative.
      
      If omitted or null, 1000 is used.
    export_timeout: >
      Configure maximum allowed time (in milliseconds) to export data. 
      
      Value must be non-negative. A value of 0 indicates no limit (infinity).
      
      If omitted or null, 30000 is used.
    max_queue_size: >
      Configure maximum queue size. Value must be positive.
      
      If omitted or null, 2048 is used.
    max_export_batch_size: >
      Configure maximum batch size. Value must be positive.
      
      If omitted or null, 512 is used.
    exporter: Configure exporter.
  path_patterns:
    - .logger_provider.processors[].batch

- type: SimpleLogRecordProcessor
  property_descriptions:
    exporter: Configure exporter.
  path_patterns:
    - .logger_provider.processors[].simple

- type: LogRecordExporter
  property_descriptions:
    otlp_http: Configure exporter to be OTLP with HTTP transport.
    otlp_grpc: Configure exporter to be OTLP with gRPC transport.
    otlp_file: Configure exporter to be OTLP with file transport.
    console: Configure exporter to be console.
  path_patterns:
    - .logger_provider.processors[].*.exporter

- type: LogRecordLimits
  property_descriptions:
    attribute_value_length_limit: >
      Configure max attribute value size. Overrides .attribute_limits.attribute_value_length_limit. 
      
      Value must be non-negative.
      
      If omitted or null, there is no limit.
    attribute_count_limit: >
      Configure max attribute count. Overrides .attribute_limits.attribute_count_limit. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
  path_patterns:
    - .logger_provider.limits
# END LoggerProvider

# START TracerProvider
- type: TracerProvider
  property_descriptions:
    processors: Configure span processors.
    limits: Configure span limits. See also attribute_limits.
    sampler: >
      Configure the sampler.
      
      If omitted, parent based sampler with a root of always_on is used.
  path_patterns:
    - .tracer_provider

- type: SpanProcessor
  property_descriptions:
    batch: Configure a batch span processor.
    simple: Configure a simple span processor.
  path_patterns:
    - .tracer_provider.processors[]

- type: BatchSpanProcessor
  property_descriptions:
    schedule_delay: >
      Configure delay interval (in milliseconds) between two consecutive exports. 
      
      Value must be non-negative.
      
      If omitted or null, 5000 is used.
    export_timeout: >
      Configure maximum allowed time (in milliseconds) to export data. 
      
      Value must be non-negative. A value of 0 indicates no limit (infinity).
      
      If omitted or null, 30000 is used.
    max_queue_size: >
      Configure maximum queue size. Value must be positive.
      
      If omitted or null, 2048 is used.
    max_export_batch_size: >
      Configure maximum batch size. Value must be positive.
      
      If omitted or null, 512 is used.
    exporter: Configure exporter.
  path_patterns:
    - .tracer_provider.processors[].batch

- type: SimpleSpanProcessor
  property_descriptions:
    exporter: Configure exporter.
  path_patterns:
    - .tracer_provider.processors[].simple

- type: SpanExporter
  property_descriptions:
    otlp_http: Configure exporter to be OTLP with HTTP transport.
    otlp_grpc: Configure exporter to be OTLP with gRPC transport.
    otlp_file: Configure exporter to be OTLP with file transport.
    zipkin: Configure exporter to be zipkin.
    console: Configure exporter to be console.
  path_patterns:
    - .tracer_provider.processors[].*.exporter

- type: ZipkinSpanExporter
  property_descriptions:
    endpoint: >
      Configure endpoint.
      
      If omitted or null, http://localhost:9411/api/v2/spans is used.
    timeout: >
      Configure max time (in milliseconds) to wait for each export. 
      
      Value must be non-negative. A value of 0 indicates indefinite.
      
      If omitted or null, 10000 is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.zipkin

- type: SpanLimits
  property_descriptions:
    attribute_value_length_limit: >
      Configure max attribute value size. Overrides .attribute_limits.attribute_value_length_limit. 
      
      Value must be non-negative.
      
      If omitted or null, there is no limit.
    attribute_count_limit: >
      Configure max attribute count. Overrides .attribute_limits.attribute_count_limit. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
    event_count_limit: >
      Configure max span event count. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
    link_count_limit: >
      Configure max span link count. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
    event_attribute_count_limit: >
      Configure max attributes per span event. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
    link_attribute_count_limit: >
      Configure max attributes per span link. 
      
      Value must be non-negative.
      
      If omitted or null, 128 is used.
  path_patterns:
    - .tracer_provider.limits

- type: Sampler
  property_descriptions:
    parent_based: Configure sampler to be parent_based.
    trace_id_ratio_based: Configure sampler to be trace_id_ratio_based.
    always_on: Configure sampler to be always_on.
    always_off: Configure sampler to be always_off.
    root: >
      Configure root sampler.
      
      If omitted or null, always_on is used.
    remote_parent_sampled: >
      Configure remote_parent_sampled sampler.
      
      If omitted or null, always_on is used.
    remote_parent_not_sampled: >
      Configure remote_parent_not_sampled sampler.
      
      If omitted or null, always_off is used.
    local_parent_sampled: >
      Configure local_parent_sampled sampler.
      
      If omitted or null, always_on is used.
    local_parent_not_sampled: >
      Configure local_parent_not_sampled sampler.
      
      If omitted or null, always_off is used.
    ratio: >
      Configure trace_id_ratio.
      
      If omitted or null, 1.0 is used.
  path_patterns:
    - .tracer_provider.sampler
    - .tracer_provider.sampler.*
# END TracerProvider

# START MeterProvider
- type: MeterProvider
  property_descriptions:
    readers: Configure metric readers.
    views: >
      Configure views. 
      
      Each view has a selector which determines the instrument(s) it applies to, and a configuration for the resulting stream(s).
    exemplar_filter: >
      Configure the exemplar filter. 
      
      Values include: trace_based, always_on, always_off. For behavior of values see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/configuration/sdk-environment-variables.md#metrics-sdk-configuration.
      
      If omitted or null, trace_based is used.
  path_patterns:
    - .meter_provider

- type: MetricReader
  property_descriptions:
    pull: Configure a pull based metric reader.
    periodic: Configure a periodic metric reader.
  path_patterns:
    - .meter_provider.readers[]

- type: PullMetricReader
  property_descriptions:
    exporter: Configure exporter.
    producers: Configure metric producers.
  path_patterns:
    - .meter_provider.readers[].pull

- type: PeriodicMetricReader
  property_descriptions:
    interval: >
      Configure delay interval (in milliseconds) between start of two consecutive exports. 
      
      Value must be non-negative.
      
      If omitted or null, 60000 is used.
    timeout: >
      Configure maximum allowed time (in milliseconds) to export data. 
      
      Value must be non-negative. A value of 0 indicates no limit (infinity).
      
      If omitted or null, 30000 is used.
    exporter: Configure exporter.
    producers: Configure metric producers.
  path_patterns:
    - .meter_provider.readers[].periodic

- type: MetricProducer
  property_descriptions:
    opencensus: Configure metric producer to be opencensus.
    prometheus: Configure metric producer to be prometheus.
  path_patterns:
    - .meter_provider.readers[].pull.producers[]
    - .meter_provider.readers[].periodic.producers[]

- type: MetricExporter
  property_descriptions:
    prometheus: Configure exporter to be prometheus.
    otlp_http: Configure exporter to be OTLP with HTTP transport.
    otlp_grpc: Configure exporter to be OTLP with gRPC transport.
    otlp_file: Configure exporter to be OTLP with file transport.
    console: Configure exporter to be console.
  path_patterns:
    - .meter_provider.readers[].*.exporter

- type: PrometheusMetricExporter
  property_descriptions:
    host: >
      Configure host.
      
      If omitted or null, localhost is used.
    port: >
      Configure port.
      
      If omitted or null, 9464 is used.
    without_units: >
      Configure Prometheus Exporter to produce metrics without a unit suffix or UNIT metadata.
      
      If omitted or null, false is used.
    without_type_suffix: >
      Configure Prometheus Exporter to produce metrics without a type suffix.
      
      If omitted or null, false is used.
    without_scope_info: >
      Configure Prometheus Exporter to produce metrics without a scope info metric.
      
      If omitted or null, false is used.
    with_resource_constant_labels: Configure Prometheus Exporter to add resource attributes as metrics attributes.
  path_patterns:
    - .meter_provider.readers[].pull.exporter.prometheus
- type: PrometheusIncludeExclude
  property_descriptions:
    included: >
      Configure resource attributes to be included.
      
      Attribute keys from resources are evaluated to match as follows:
       * If the value of the attribute key exactly matches.
       * If the value of the attribute key matches the wildcard pattern, where '?' matches any single character and '*' matches any number of characters including none.
      If omitted, no resource attributes are included.
    excluded: >
      Configure resource attributes to be excluded. Applies after .with_resource_constant_labels.included (i.e. excluded has higher priority than included).
      
      Attribute keys from resources are evaluated to match as follows:
       * If the value of the attribute key exactly matches.
       * If the value of the attribute key matches the wildcard pattern, where '?' matches any single character and '*' matches any number of characters including none.
      If omitted, .included resource attributes are included.
  path_patterns:
    - .meter_provider.readers[].pull.exporter.prometheus.with_resource_constant_labels

- type: View
  property_descriptions:
    selector: >
      Configure view selector. 
      
      Selection criteria is additive as described in https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#instrument-selection-criteria.
    stream: Configure view stream.
  path_patterns:
    - .meter_provider.views[]

- type: Selector
  property_descriptions:
    instrument_name: >
      Configure instrument name selection criteria.
      
      If omitted or null, all instrument names match.
    instrument_type: >
      Configure instrument type selection criteria.
      
      If omitted or null, all instrument types match.
    unit: >
      Configure the instrument unit selection criteria.
      
      If omitted or null, all instrument units match.
    meter_name: >
      Configure meter name selection criteria.
      
      If omitted or null, all meter names match.
    meter_version: >
      Configure meter version selection criteria.
      
      If omitted or null, all meter versions match.
    meter_schema_url: >
      Configure meter schema url selection criteria.
      
      If omitted or null, all meter schema URLs match.
  path_patterns:
    - .meter_provider.views[].selector

- type: Stream
  property_descriptions:
    name: >
      Configure metric name of the resulting stream(s).
      
      If omitted or null, the instrument's original name is used.
    description: >
      Configure metric description of the resulting stream(s).
      
      If omitted or null, the instrument's origin description is used.
    aggregation: > 
      Configure aggregation of the resulting stream(s). 
      
      Values include: default, drop, explicit_bucket_histogram, base2_exponential_bucket_histogram, last_value, sum. For behavior of values see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#aggregation.
      
      If omitted, default is used.
    attribute_keys: >
      Configure attribute keys retained in the resulting stream(s).
  path_patterns:
    - .meter_provider.views[].stream

- type: StreamIncludeExclude
  property_descriptions:
    included: >
      Configure list of attribute keys to include in the resulting stream(s). All other attributes are dropped. 
      
      If omitted, all attributes are included.
    excluded: >
      Configure list of attribute keys to exclude from the resulting stream(s). Applies after .attribute_keys.included (i.e. excluded has higher priority than included).
      
      If omitted, .attribute_keys.included are included.
  path_patterns:
    - .meter_provider.views[].stream.attribute_keys

- type: StreamAggregation
  property_descriptions:
    explicit_bucket_histogram: Configure aggregation to be explicit_bucket_histogram.
  path_patterns:
    - .meter_provider.views[].stream.aggregation

- type: StreamAggregationExplicitBucketHistogram
  property_descriptions:
    boundaries: >
      Configure bucket boundaries.
      
      If omitted, [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000] is used.
    record_min_max: >
      Configure record min and max.
      
      If omitted or null, true is used.
  path_patterns:
    - .meter_provider.views[].stream.aggregation.explicit_bucket_histogram
# END meter_provider

# START common
- type: OtlpExporterCommon
  property_descriptions:
    certificate: >
      Configure certificate. 
      
      Absolute path to certificate file.
      
      If omitted or null, system default certificate verification is used for secure connections.
    client_key: >
      Configure mTLS private client key. 
      
      Absolute path to client key in PEM format. If set, .client_certificate must also be set.
      
      If omitted or null, mTLS is not used.
    client_certificate: >
      Configure mTLS client certificate. 
      
      Absolute path to certificate file. If set, .client_key must also be set.
      
      If omitted or null, mTLS is not used.
    headers: >
      Configure headers. Entries have higher priority than entries from .headers_list.
      
      If an entry's .value is null, the entry is ignored.
    headers_list: >
      Configure headers. Entries have lower priority than entries from .headers.
      
      The value is a list of comma separated key-value pairs matching the format of OTEL_EXPORTER_OTLP_HEADERS. See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#configuration-options for details.
      
      If omitted or null, no headers are added.
    compression: >
      Configure compression.
      
      Values include: gzip, none. Implementations may support other compression algorithms.
      
      If omitted or null, none is used.
    timeout: >
      Configure max time (in milliseconds) to wait for each export. 
      
      Value must be non-negative. A value of 0 indicates no limit (infinity).
      
      If omitted or null, 10000 is used.
    temporality_preference: >
      Configure temporality preference. 
      
      Values include: cumulative, delta, low_memory. For behavior of values, see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk_exporters/otlp.md.
      
      If omitted or null, cumulative is used.
    default_histogram_aggregation: >
      Configure default histogram aggregation. 
      
      Values include: explicit_bucket_histogram, base2_exponential_bucket_histogram. For behavior of values, see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk_exporters/otlp.md.
      
      If omitted or null, explicit_bucket_histogram is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.otlp_http
    - .logger_provider.processors[].*.exporter.otlp_http
    - .meter_provider.readers[].periodic.exporter.otlp_http
    - .tracer_provider.processors[].*.exporter.otlp_grpc
    - .logger_provider.processors[].*.exporter.otlp_grpc
    - .meter_provider.readers[].periodic.exporter.otlp_grpc
- type: OtlpHttpExporter
  property_descriptions:
    encoding: >
      Configure the encoding used for messages. 
      
      Values include: protobuf, json. Implementations may not support json.
      
      If omitted or null, protobuf is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.otlp_http
    - .logger_provider.processors[].*.exporter.otlp_http
    - .meter_provider.readers[].periodic.exporter.otlp_http
- type: OtlpHttpSpanExporter
  property_descriptions:
    endpoint: >
      Configure endpoint, including the trace specific path.
      
      If omitted or null, http://localhost:4318/v1/traces is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.otlp_http
- type: OtlpHttpMetricExporter
  property_descriptions:
    endpoint: >
      Configure endpoint, including the metric specific path.
      
      If omitted or null, http://localhost:4318/v1/metrics is used.
  path_patterns:
    - .meter_provider.readers[].periodic.exporter.otlp_http
- type: OtlpHttpLogRecordExporter
  property_descriptions:
    endpoint: >
      Configure endpoint, including the log specific path.
      
      If omitted or null, http://localhost:4318/v1/logs is used.
  path_patterns:
    - .meter_provider.readers[].periodic.exporter.otlp_http
- type: OtlpGrpcExporter
  property_descriptions:
    endpoint: >
      Configure endpoint.
      
      If omitted or null, http://localhost:4317 is used.
    insecure: >
      Configure client transport security for the exporter's connection. 
      
      Only applicable when .endpoint is provided without http or https scheme. Implementations may choose to ignore .insecure.
      
      If omitted or null, false is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.otlp_grpc
    - .logger_provider.processors[].*.exporter.otlp_grpc
    - .meter_provider.readers[].periodic.exporter.otlp_grpc
- type: OtlpFileExporter
  property_descriptions:
    output_stream: >
      Configure output stream. 
      
      Values include stdout, or scheme+destination. For example: file:///path/to/file.jsonl.

      If omitted or null, stdout is used.
  path_patterns:
    - .tracer_provider.processors[].*.exporter.otlp_file
    - .logger_provider.processors[].*.exporter.otlp_file
    - .meter_provider.readers[].periodic.exporter.otlp_file
# END common

# START Instrumentation
- type: Instrumentation
  property_descriptions:
    general: >
      Configure general SemConv options that may apply to multiple languages and instrumentations.
      
      Instrumenation may merge general config options with the language specific configuration at .instrumentation.<language>.
    cpp: Configure C++ language-specific instrumentation libraries.
    dotnet: Configure .NET language-specific instrumentation libraries.
    erlang: Configure Erlang language-specific instrumentation libraries.
    go: Configure Go language-specific instrumentation libraries.
    java: Configure Java language-specific instrumentation libraries.
    js: Configure JavaScript language-specific instrumentation libraries.
    php: Configure PHP language-specific instrumentation libraries.
    python: Configure Python language-specific instrumentation libraries.
    ruby: Configure Ruby language-specific instrumentation libraries.
    rust: Configure Rust language-specific instrumentation libraries.
    swift: Configure Swift language-specific instrumentation libraries.
  path_patterns:
    - .instrumentation

- type: GeneralInstrumentation
  property_descriptions:
    peer: >
      Configure instrumentations following the peer semantic conventions.
      
      See peer semantic conventions: https://opentelemetry.io/docs/specs/semconv/attributes-registry/peer/
    http: >
      Configure instrumentations following the http semantic conventions.
      
      See http semantic conventions: https://opentelemetry.io/docs/specs/semconv/http/
  path_patterns:
    - .instrumentation.general

- type: GeneralInstrumentationPeer
  property_descriptions:
    service_mapping: >
      Configure the service mapping for instrumentations following peer.service semantic conventions.
      
      Each entry is a key value pair where "peer" defines the IP address and "service" defines the corresponding logical name of the service.
      
      See peer.service semantic conventions: https://opentelemetry.io/docs/specs/semconv/general/attributes/#general-remote-service-attributes
  path_patterns:
    - .instrumentation.general.peer

- type: GeneralInstrumentationHttp
  property_descriptions:
    client: Configure instrumentations following the http client semantic conventions.
    server: Configure instrumentations following the http server semantic conventions.
  path_patterns:
    - .instrumentation.general.http

- type: GeneralInstrumentationHttpClient
  property_descriptions:
    request_captured_headers: Configure headers to capture for outbound http requests.
    response_captured_headers: Configure headers to capture for outbound http responses.
  path_patterns:
    - .instrumentation.general.http.client

- type: GeneralInstrumentationHttpServer
  property_descriptions:
    request_captured_headers: Configure headers to capture for inbound http requests.
    response_captured_headers: Configure headers to capture for outbound http responses.
  path_patterns:
    - .instrumentation.general.http.server

- type: LanguageSpecificInstrumentation
  property_descriptions:
    example: Configure the instrumentation corresponding to key "example".
  path_patterns:
    - .instrumentation.*
# END Instrumentation

